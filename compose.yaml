
services:
  todo-app:
    build:
      context: ./app
    depends_on:
      - todo-database
    volumes: 
      - ./app:/app
      - /app/node_modules
    ports:
      - 3001:3001

# database services
# MySQL database service
  # This service uses the official MySQL image from Docker Hub
  # https://hub.docker.com/_/mysql
  # It runs MySQL on port 4321 and persists data in a volume.
  # The database is accessible at http://localhost:4321
  # You can connect to it using a MySQL client or from your application.
  # The service is named "mysql_db" and can be linked to your app service.
  # The "app" service can access the database using the hostname "mysql_db".
  mysql_db:
    image: mysql:8.4
    # The container is named "mysql_db" for easy identification.
    # This name is used to refer to the container in other services.
    container_name: mysql_db
    # Environment variables for MySQL configuration
    environment:
    
      # Set the root password for MySQL
      # This password is used to access the MySQL server as the root user.
      # It is recommended to change this password to a secure one.
      # In this example, the password is set to "mysecretpassword".
      # You can change it to a more secure password.
      MYSQL_ROOT_PASSWORD: mysecretpassword # The root password for MySQL
      MYSQL_DATABASE: app_db  # The name of the database to create when the container starts
      MYSQL_USER: app_user  # The username for the MySQL user
      # The username for the MySQL user.
      MYSQL_PASSWORD: password
    ports:
      - "4321:3306"
    volumes:
      - db_data:/var/lib/mysql  # Persist MySQL data
    
    restart: unless-stopped
  # This service uses the official Redis image from Docker Hub
  # https://hub.docker.com/_/redis
  # It runs Redis on port 6389 and persists data in a volume.
  # The Redis service is used for caching and session storage.
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      # Bind mount for Redis data - this is optional
      # It allows you to persist Redis data on the host machine.
      # You can remove this line if you don't need to persist Redis data.
      # This is useful for development and testing purposes.
      # If you want to persist Redis data, you can use a named volume instead.
      # Uncomment the line below to use a bind mount for Redis data
      # - ./redis_data:/data:ro # Bind mount for Redis data
      # Named volume for Redis data - this is optional
      # It allows you to persist Redis data in a named volume.
      - ./redis_data:/data:ro # Bind mount for Redis data 
      # Uncomment the line below to use a named volume for Redis data
      # - redis_data:/data # Named volume for Redis data
    # The Redis service is restarted unless stopped manually.
    # This ensures that the Redis service is always running unless explicitly stopped.
    # You can change this to "always" if you want the service to always restart.
    # This is useful for production environments where you want the service to be always available.
    # If you want to stop the service, you can use the "docker-compose stop" command.
    # If you want to remove the service, you can use the "docker-compose down" command.
    # If you want to remove the service and its associated volumes, you can use the "docker-compose down -v" command.
# MongoDB database service
  # This service uses the official MongoDB image from Docker Hub
  # https://hub.docker.com/_/mongo
  # It runs MongoDB on port 27018 and persists data in a volume.
  # The database is accessible at http://localhost:27018
  # You can connect to it using a MongoDB client or from your application.
  # The service is named "todo-database" and is linked to the "todo-app" service.
  # The "todo-app" service can access the database using the hostname "todo-database".
  todo-database:
    image: mongo:6
    command: mongod --port 27018
    ports:
      - 27018:27018

    volumes:
      - todo-mongo-data:/data/db # Persist MongoDB data
      - todo-mongo-config:/data/config # Persist MongoDB configuration data
    restart: unless-stopped

#postgres database service
  # This service uses the official PostgreSQL image from Docker Hub
  # https://hub.docker.com/_/postgres
  # It runs PostgreSQL on port 5432 and persists data in a volume.
  # The database is accessible at http://localhost:5432
  # You can connect to it using a PostgreSQL client or from your application.
  # The service is named "todo-postgres" and is linked to the "todo-app" service.
  # The "todo-app" service can access the database using the hostname "todo-postgres".

  :
    image: postgres:latest
    environment:
      POSTGRES_USER: webapp_user
      # The username for the PostgreSQL user.
      POSTGRES_PASSWORD: webapp_password
      POSTGRES_DB: webapp_db
    ports:
      - "5432:5432"
    volumes:
      - todo-postgres-data:/var/lib/postgresql/data  # Persist PostgreSQL data
      - todo-postgres-config:/var/lib/postgresql/config  # Persist PostgreSQL configuration data
    restart: unless-stopped

volumes:
  # Named volumes for persistent data storage
  db_data:
    driver: local
  redis_data:
    driver: local
  web_data:
    driver: local
  backend_data:
    driver: local
  backup_data:
    driver: local
  # Named volumes for Todo app data
  # These volumes are used to persist data for the Todo app.
  # The "todo-app-data" volume is used for the Todo app data directory.
  # The "todo-database-data" volume is used for the MongoDB data directory.
  # The "todo-postgres-data" volume is used for the PostgreSQL data directory.
  # These volumes are created automatically when the services are started.
  todo-app-data:
    driver: local
  # The "todo-database-data" volume is used for the MongoDB data directory.
  # The "todo-backend-data" volume is used for the backend data directory.
  # The "todo-postgres-data" volume is used for the PostgreSQL data directory.
  # These volumes are created automatically when the services are started.
  # You can access the data in these volumes using the Docker CLI or Docker Desktop.
  todo-database-data:
    driver: local
  todo-backend-data:
    driver: local
  todo-postgres-data:
    driver: local

  # MongoDB data
  # These volumes are used to persist MongoDB data and configuration.
  # The "todo-data" volume is used for the MongoDB data directory.
  # The "todo-config" volume is used for the MongoDB configuration directory.
  # These volumes are created automatically when the services are started.
  # You can access the data in these volumes using the Docker CLI or Docker Desktop.
  todo-mongo-data:
    driver: local
  todo-mongo-config:
    driver: local